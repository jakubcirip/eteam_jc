import axios from 'axios';

export class MailuManager {
  private static i: MailuManager;

  static getInstance(): MailuManager {
    if (!MailuManager.i) {
      MailuManager.i = new MailuManager();
    }

    return MailuManager.i;
  }

  constructor() {
    this.setup();
  }

  async setup() {}

  async changePassword(nick: string, newPass: string) {
    try {
      await axios.patch(
        'https://www.hostcreators.sk/api/v1/host/domain/' +
          process.env.HOSTCREATOR_DOMAIN_ID +
          '/user/' +
          nick,
        {
          user_password_confirmation: newPass,
          user_password: newPass,
        },
        {
          headers: {
            Authorization: 'Bearer ' + process.env.HOSTCREATOR_TOKEN,
          },
        }
      );

      return true;
    } catch (err) {
      console.log(err);
      console.log(JSON.stringify(err.response.data));
      return false;
    }
  }

  async deleteEmail(nick: string) {
    try {
      await axios.delete(
        'https://www.hostcreators.sk/api/v1/host/domain/' +
          process.env.HOSTCREATOR_DOMAIN_ID +
          '/user/' +
          nick,
        {
          headers: {
            Authorization: 'Bearer ' + process.env.HOSTCREATOR_TOKEN,
          },
        }
      );

      return true;
    } catch (err) {
      console.log(err);
      console.log(JSON.stringify(err.response.data));
      return false;
    }
  }

  async registerEmail(nick: string, pass: string, name: string) {
    try {
      await axios.post(
        'https://www.hostcreators.sk/api/v1/host/domain/' +
          process.env.HOSTCREATOR_DOMAIN_ID +
          '/user',
        {
          data: {
            is_mail: true,
            is_ftp: false,
            is_ssh: false,
            is_catch_all: false,
            home_directory: '/',
            quota: '107374182400S',
            spamlevel: 5,
            viruschecks: true,
            bannedchecks: true,
            spamchecks: true,
            spammodifiessubj: true,
            warnbannedrecip: true,
            warnvirusrecip: false,
            autoreply: {
              is_autoreply: false,
              active_from: '2019-11-23 00:00:00',
              active_to: '2019-11-30 23:59:59',
            },
            set_uid: nick,
            displayname: name,
            user_password: pass,
            user_password_confirmation: pass,
            note: 'Generated by API',
          },
        },
        {
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'Bearer ' + process.env.HOSTCREATOR_TOKEN,
          },
        }
      );

      return true;
    } catch (err) {
      console.log(err);
      console.log(JSON.stringify(err.response.data));
      return false;
    }
  }
}
